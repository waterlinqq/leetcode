// 452. 用最少数量的箭引爆气球
// 在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以y坐标并不重要，因此只要知道开始和结束的x坐标就足够了。开始坐标总是小于结束坐标。平面内最多存在104个气球。

// 一支弓箭可以沿着x轴从不同点完全垂直地射出。在坐标x处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。

// Example:

// 输入:
// [[10,16], [2,8], [1,6], [7,12]]

// 输出:
// 2

// 解释:
// 对于该样例，我们可以在x = 6（射爆[2,8],[1,6]两个气球）和 x = 11（射爆另外两个气球）。
/**
 * @param {number[][]} points
 * @return {number}
 */

// 找出重疊區間 某氣球結束大於某氣球開始
// 需射爆所有氣球 假如該氣球沒有重疊區間 也需要射
// 按結束值排序所有氣球 找出重疊區間的最大可能 然後射爆
//  如果按開始值排序 氣球可能很大 涵括多個重疊區間
// 只要下個氣球起始值小於等於當前氣球結束值 就可以算重疊 因為射箭可以在當前結束值處發射
// 因此下個氣球起時值大於當前氣球結束值 就需多射出箭
/***
 * -------
 *      ----
 *    -------
 *       -----
 * 
 *       ^
 */
var findMinArrowShots = function(points) {
  if(points.length == 0) return 0
    points.sort((a,b)=>a[1] - b[1])
      let count = 0
      let preEnd = -Infinity
      for(let i = 0; i<points.length; i++){
        if(points[i][0] > preEnd){
          count ++
          preEnd = points[i][1]
        }
      }
      return count
  };

