// 435. 无重叠区间
// 给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。

// 注意:

// 可以认为区间的终点总是大于它的起点。
// 区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。
// 示例 1:

// 输入: [ [1,2], [2,3], [3,4], [1,3] ]

// 输出: 1

// 解释: 移除 [1,3] 后，剩下的区间没有重叠。
// 示例 2:

// 输入: [ [1,2], [1,2], [1,2] ]

// 输出: 2

// 解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。
// 示例 3:

// 输入: [ [1,2], [2,3] ]

// 输出: 0

// 解释: 你不需要移除任何区间，因为它们已经是无重叠的了。

/**
 * @param {number[][]} intervals
 * @return {number}
 */

// 不重疊 -> 某區間起始不能小於某區間結束 
// 重疊數最小 -> 只要使用越多區間 把非重疊的都使用完  剩下的重疊結果的就會越少 
// 使用越多區間 -> 按照結束值升序排序 能得出最開始使用的區間 (騰出的空間最大 可以給其他區間)
//    按起始值排序不能保證該區間多長 
var eraseOverlapIntervals = function(intervals) {
  intervals.sort((a,b)=>a[1]-b[1])
  let count = 0 
  let preIndex = 0
  for(let i = 1; i < intervals.length; i++){
    if(intervals[1][0] < intervals[preIndex][1]) count ++
    else preIndex = i
  }
  return count
};